@import url(./css/index.css);
@import url(./css/logo.css);
@import url(./css/hr.css);

body { padding:0; margin:0 }
article { margin-top: 15px; }
fieldset {
   border-color: dimgrey;
   border-style: dashed;
 }
 
 [menu-top] { margin-bottom:-25px; }

#title logo { 
   top: -5px;
   left: 3px; 
}

#title code { font-size: 3rem !important; }

main[index] h1 { 
   color:wheat !important; 
   font-size: 4rem !important;
}

h3:before { content:'» '; }
h3 { font-size: 1.5rem; }

strong { font-weight: 600; }

h2 { font-weight: 100; }

[renders]:nth-child(1) table td {
   color: dimgrey;
}

code { 
   line-height: 15px; 
   letter-spacing: -0px;
}

[hide] { color:transparent }

[code] th { 
   text-align:center; 
   font-weight:400;
   font-size:1.2rem;
}

[code] tr:first-of-type td { padding-top: 10px; }
[code] table, tr, td { border: 0 !important; }
[code] table td { zoom: 0.90; line-height:19px; }
[code] table td:before { 
   content:'● '; 
   font-size:1rem; 
   font-weight: bolder; 
}

h2 { padding-bottom: 10px; }

h2, h3 { color: #DDD; }

h3 {
   color: #DDD; 
   font-weight: 400; 
   margin-top: 1.1rem;
   border-bottom: dashed 0px #333; 
}

h2 > code { 
   color: wheat;
   font-weight: unset;
   background: transparent;
   font-family: 'fira sans' !important;   
   font-size: 23px !important;
}

h2::before { content:'' }

h1 { font-family: quicksand }
[specs] a { font-family: agave !important; font-weight: 100; }
[specs] tr td:nth-of-type(3) { font-size: 13px; white-space: nowrap }
[specs] tr td:nth-of-type(3) { opacity:0.65 }
[specs] tr td:nth-of-type(2) { font-size: 13px; }
[specs] tr td:not(:nth-of-type(1)) { padding:0 10px; margin:0 }
[specs] tr { line-height: 23px; }
[specs] tr:not(:last-of-type) td { border-bottom: solid 1px grey !important; }
[specs] tr td:nth-of-type(1) {
   /* transform: rotate(-90deg); */
   font-family: quicksand;
   font-weight: bolder;
   font-size: 1.2rem;
}

legend::before { content:'' }
legend:hover { cursor:pointer; filter: brightness(1) }

legend {
   padding: 0 7px;
   margin-top: 2rem;
   font-size: 1.3rem;
   color: #999;
   /* border-bottom: solid 1px grey; */
}

legend b {      
   /* color: wheat; */
   /* color: rgb(96, 164, 216) !important; */
   color: rgb(83, 171, 238) !important; 
   font-weight: 900;
   font-family: quicksand;
   font-size: 15px;
}

fieldset {
   border-left: 0;
   border-right: 0;
   border-bottom: 0;
}


h1#title {
   margin: 0;
   border: 0;
   padding: 0;
   margin-bottom: -5px;
}

main[index] {
   top: 50%;
   left: 50%;
   position: absolute;
   transform: translate(-50%, -50%);
}

blockquote {
   font-size: 1.1rem !important;
}


body, html {
   /* overflow: hidden; */
   background-color: #222;
   width:100%; 
   height: 100%;
   padding: 0;
   margin: 0;
}

main[iframe] {
   width:100%; 
   height: 100%;
   margin: 0 auto;
   max-width: 999px;
   display: grid;
   padding: 0;
   grid-template-columns: 190px 1fr;
   grid-template-rows: 1fr;
}

main[iframe] > iframe {
   overflow: none;
   width: 850px; 
   height: 100%;
   padding: 0;
   border: 0;
}<!DOCTYPE html>
<html lang="en">

<head>
   <meta charset="UTF-8">
   <meta name="viewport" content="width=device-width, initial-scale=1.0">
   <link rel="stylesheet" href="./index.css">
   <script src="./index.js"></script>
   <title>reactive.js</title>
</head>

<body onload="startup()">
   <style>
      #title span { font-size: 39px }
      a { font-size:19px; font-weight: bolder; }
      html { overflow: hidden !important; }
   </style>   

   <main iframe hidden>
      <iframe id="iframe"></iframe>
   </main>
   
   <main index>
      <h1 id='title'>
         <logo></logo><code>eactive</code><span>.js</span>
      </h1>

      <hr />

      <center style='text-align: center !important; padding: 15px;'>
         <blockquote> minimalist full-stack React Framework
            <br />with full SSR and simplified states
         </blockquote>
         <br/><a href='#' onclick="goto('./overview.html')">documentation</a>
      </center>
   </main>

   <script>
   </script>
</body>

</html>function startup() {   
   const iframe = document.querySelector('iframe')
   const content = iframe.contentWindow.document.body

   adjustZoom(content)
   createLogo(document)
   // createLink(iframe, content)
}

function goto(href) {
   document.querySelector('main[iframe]').hidden = false
   document.querySelector('iframe').src = href
   document.querySelector('main[index]').hidden = true
}

function adjustZoom(content) {
   content.style.zoom = 1.17
   content.style.padding = '50px !important'   
}

function createLink(iframe, content) {
   const links = content.querySelectorAll('[overview] a')
   const found = x => x.href.split('#').at(-1)
   const apply = a => iframe.src = `./preview.html#${found(a)}`
   const refix = () => setTimeout(() => adjustZoom(content), 1500)
   const click = a => { apply(a); refix(); }

   links.forEach(a => a.onclick = () => click(a))
}

function createLogo(content) {
   const logo = content.querySelector("logo")
   const divs = [1,2,3].map(() => document.createElement('div'))
   
   divs.concat([document.createElement('span')])   
       .forEach(x => logo.appendChild(x))

   setInterval(function() {
      const from0To3 = Math.floor(Math.random() * 3)
      const during = 150 + (100 * (from0To3 * 9))

      document.querySelectorAll("logo div").forEach(div => 
         div.style.animationDuration = `${during}ms`)
   }, 3000)
}